// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace bess {
namespace pb {

static const char* BESSControl_method_names[] = {
  "/bess.pb.BESSControl/GetVersion",
  "/bess.pb.BESSControl/ResetAll",
  "/bess.pb.BESSControl/KillBess",
  "/bess.pb.BESSControl/ImportPlugin",
  "/bess.pb.BESSControl/UnloadPlugin",
  "/bess.pb.BESSControl/ListPlugins",
  "/bess.pb.BESSControl/PauseAll",
  "/bess.pb.BESSControl/PauseWorker",
  "/bess.pb.BESSControl/ResumeWorker",
  "/bess.pb.BESSControl/ResumeAll",
  "/bess.pb.BESSControl/ResetWorkers",
  "/bess.pb.BESSControl/ListWorkers",
  "/bess.pb.BESSControl/AddWorker",
  "/bess.pb.BESSControl/DestroyWorker",
  "/bess.pb.BESSControl/ResetTcs",
  "/bess.pb.BESSControl/ListTcs",
  "/bess.pb.BESSControl/CheckSchedulingConstraints",
  "/bess.pb.BESSControl/AddTc",
  "/bess.pb.BESSControl/UpdateTcParams",
  "/bess.pb.BESSControl/UpdateTcParent",
  "/bess.pb.BESSControl/GetTcStats",
  "/bess.pb.BESSControl/ListDrivers",
  "/bess.pb.BESSControl/GetDriverInfo",
  "/bess.pb.BESSControl/ResetPorts",
  "/bess.pb.BESSControl/ListPorts",
  "/bess.pb.BESSControl/CreatePort",
  "/bess.pb.BESSControl/DestroyPort",
  "/bess.pb.BESSControl/SetPortConf",
  "/bess.pb.BESSControl/GetPortConf",
  "/bess.pb.BESSControl/GetPortStats",
  "/bess.pb.BESSControl/GetLinkStatus",
  "/bess.pb.BESSControl/ListMclass",
  "/bess.pb.BESSControl/GetMclassInfo",
  "/bess.pb.BESSControl/ResetModules",
  "/bess.pb.BESSControl/ListModules",
  "/bess.pb.BESSControl/CreateModule",
  "/bess.pb.BESSControl/DestroyModule",
  "/bess.pb.BESSControl/GetModuleInfo",
  "/bess.pb.BESSControl/ConnectModules",
  "/bess.pb.BESSControl/DisconnectModules",
  "/bess.pb.BESSControl/DumpMempool",
  "/bess.pb.BESSControl/ModuleCommand",
  "/bess.pb.BESSControl/ListGateHookClass",
  "/bess.pb.BESSControl/GetGateHookClassInfo",
  "/bess.pb.BESSControl/ConfigureGateHook",
  "/bess.pb.BESSControl/ListGateHooks",
  "/bess.pb.BESSControl/GateHookCommand",
  "/bess.pb.BESSControl/ConfigureResumeHook",
};

std::unique_ptr< BESSControl::Stub> BESSControl::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BESSControl::Stub> stub(new BESSControl::Stub(channel, options));
  return stub;
}

BESSControl::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetVersion_(BESSControl_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetAll_(BESSControl_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KillBess_(BESSControl_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ImportPlugin_(BESSControl_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnloadPlugin_(BESSControl_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListPlugins_(BESSControl_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PauseAll_(BESSControl_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PauseWorker_(BESSControl_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResumeWorker_(BESSControl_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResumeAll_(BESSControl_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetWorkers_(BESSControl_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListWorkers_(BESSControl_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddWorker_(BESSControl_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyWorker_(BESSControl_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetTcs_(BESSControl_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTcs_(BESSControl_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckSchedulingConstraints_(BESSControl_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddTc_(BESSControl_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateTcParams_(BESSControl_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateTcParent_(BESSControl_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTcStats_(BESSControl_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDrivers_(BESSControl_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDriverInfo_(BESSControl_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetPorts_(BESSControl_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListPorts_(BESSControl_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreatePort_(BESSControl_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyPort_(BESSControl_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPortConf_(BESSControl_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPortConf_(BESSControl_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPortStats_(BESSControl_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLinkStatus_(BESSControl_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListMclass_(BESSControl_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMclassInfo_(BESSControl_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetModules_(BESSControl_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListModules_(BESSControl_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateModule_(BESSControl_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyModule_(BESSControl_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModuleInfo_(BESSControl_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConnectModules_(BESSControl_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisconnectModules_(BESSControl_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DumpMempool_(BESSControl_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModuleCommand_(BESSControl_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListGateHookClass_(BESSControl_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGateHookClassInfo_(BESSControl_method_names[43], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfigureGateHook_(BESSControl_method_names[44], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListGateHooks_(BESSControl_method_names[45], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GateHookCommand_(BESSControl_method_names[46], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfigureResumeHook_(BESSControl_method_names[47], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BESSControl::Stub::GetVersion(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::VersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::VersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVersion_, context, request, response);
}

void BESSControl::Stub::async::GetVersion(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::VersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::VersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::GetVersion(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::VersionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::VersionResponse>* BESSControl::Stub::PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::VersionResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::VersionResponse>* BESSControl::Stub::AsyncGetVersionRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ResetAll(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetAll_, context, request, response);
}

void BESSControl::Stub::async::ResetAll(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetAll_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ResetAll(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncResetAllRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetAll_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncResetAllRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetAllRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::KillBess(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_KillBess_, context, request, response);
}

void BESSControl::Stub::async::KillBess(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KillBess_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::KillBess(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KillBess_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncKillBessRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_KillBess_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncKillBessRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncKillBessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ImportPlugin(::grpc::ClientContext* context, const ::bess::pb::ImportPluginRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::ImportPluginRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ImportPlugin_, context, request, response);
}

void BESSControl::Stub::async::ImportPlugin(::grpc::ClientContext* context, const ::bess::pb::ImportPluginRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::ImportPluginRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImportPlugin_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ImportPlugin(::grpc::ClientContext* context, const ::bess::pb::ImportPluginRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImportPlugin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncImportPluginRaw(::grpc::ClientContext* context, const ::bess::pb::ImportPluginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::ImportPluginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ImportPlugin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncImportPluginRaw(::grpc::ClientContext* context, const ::bess::pb::ImportPluginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncImportPluginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::UnloadPlugin(::grpc::ClientContext* context, const ::bess::pb::UnloadPluginRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::UnloadPluginRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnloadPlugin_, context, request, response);
}

void BESSControl::Stub::async::UnloadPlugin(::grpc::ClientContext* context, const ::bess::pb::UnloadPluginRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::UnloadPluginRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnloadPlugin_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::UnloadPlugin(::grpc::ClientContext* context, const ::bess::pb::UnloadPluginRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnloadPlugin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncUnloadPluginRaw(::grpc::ClientContext* context, const ::bess::pb::UnloadPluginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::UnloadPluginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnloadPlugin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncUnloadPluginRaw(::grpc::ClientContext* context, const ::bess::pb::UnloadPluginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnloadPluginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ListPlugins(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::ListPluginsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::ListPluginsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListPlugins_, context, request, response);
}

void BESSControl::Stub::async::ListPlugins(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListPluginsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::ListPluginsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListPlugins_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ListPlugins(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListPluginsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListPlugins_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListPluginsResponse>* BESSControl::Stub::PrepareAsyncListPluginsRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::ListPluginsResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListPlugins_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListPluginsResponse>* BESSControl::Stub::AsyncListPluginsRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListPluginsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::PauseAll(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PauseAll_, context, request, response);
}

void BESSControl::Stub::async::PauseAll(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PauseAll_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::PauseAll(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PauseAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncPauseAllRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PauseAll_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncPauseAllRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPauseAllRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::PauseWorker(::grpc::ClientContext* context, const ::bess::pb::PauseWorkerRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::PauseWorkerRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PauseWorker_, context, request, response);
}

void BESSControl::Stub::async::PauseWorker(::grpc::ClientContext* context, const ::bess::pb::PauseWorkerRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::PauseWorkerRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PauseWorker_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::PauseWorker(::grpc::ClientContext* context, const ::bess::pb::PauseWorkerRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PauseWorker_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncPauseWorkerRaw(::grpc::ClientContext* context, const ::bess::pb::PauseWorkerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::PauseWorkerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PauseWorker_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncPauseWorkerRaw(::grpc::ClientContext* context, const ::bess::pb::PauseWorkerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPauseWorkerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ResumeWorker(::grpc::ClientContext* context, const ::bess::pb::ResumeWorkerRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::ResumeWorkerRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResumeWorker_, context, request, response);
}

void BESSControl::Stub::async::ResumeWorker(::grpc::ClientContext* context, const ::bess::pb::ResumeWorkerRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::ResumeWorkerRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResumeWorker_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ResumeWorker(::grpc::ClientContext* context, const ::bess::pb::ResumeWorkerRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResumeWorker_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncResumeWorkerRaw(::grpc::ClientContext* context, const ::bess::pb::ResumeWorkerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::ResumeWorkerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResumeWorker_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncResumeWorkerRaw(::grpc::ClientContext* context, const ::bess::pb::ResumeWorkerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResumeWorkerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ResumeAll(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResumeAll_, context, request, response);
}

void BESSControl::Stub::async::ResumeAll(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResumeAll_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ResumeAll(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResumeAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncResumeAllRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResumeAll_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncResumeAllRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResumeAllRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ResetWorkers(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetWorkers_, context, request, response);
}

void BESSControl::Stub::async::ResetWorkers(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetWorkers_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ResetWorkers(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetWorkers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncResetWorkersRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetWorkers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncResetWorkersRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetWorkersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ListWorkers(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::ListWorkersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::ListWorkersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListWorkers_, context, request, response);
}

void BESSControl::Stub::async::ListWorkers(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListWorkersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::ListWorkersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListWorkers_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ListWorkers(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListWorkersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListWorkers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListWorkersResponse>* BESSControl::Stub::PrepareAsyncListWorkersRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::ListWorkersResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListWorkers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListWorkersResponse>* BESSControl::Stub::AsyncListWorkersRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListWorkersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::AddWorker(::grpc::ClientContext* context, const ::bess::pb::AddWorkerRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::AddWorkerRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddWorker_, context, request, response);
}

void BESSControl::Stub::async::AddWorker(::grpc::ClientContext* context, const ::bess::pb::AddWorkerRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::AddWorkerRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddWorker_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::AddWorker(::grpc::ClientContext* context, const ::bess::pb::AddWorkerRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddWorker_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncAddWorkerRaw(::grpc::ClientContext* context, const ::bess::pb::AddWorkerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::AddWorkerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddWorker_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncAddWorkerRaw(::grpc::ClientContext* context, const ::bess::pb::AddWorkerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddWorkerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::DestroyWorker(::grpc::ClientContext* context, const ::bess::pb::DestroyWorkerRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::DestroyWorkerRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyWorker_, context, request, response);
}

void BESSControl::Stub::async::DestroyWorker(::grpc::ClientContext* context, const ::bess::pb::DestroyWorkerRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::DestroyWorkerRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyWorker_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::DestroyWorker(::grpc::ClientContext* context, const ::bess::pb::DestroyWorkerRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyWorker_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncDestroyWorkerRaw(::grpc::ClientContext* context, const ::bess::pb::DestroyWorkerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::DestroyWorkerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyWorker_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncDestroyWorkerRaw(::grpc::ClientContext* context, const ::bess::pb::DestroyWorkerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyWorkerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ResetTcs(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetTcs_, context, request, response);
}

void BESSControl::Stub::async::ResetTcs(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetTcs_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ResetTcs(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetTcs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncResetTcsRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetTcs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncResetTcsRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetTcsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ListTcs(::grpc::ClientContext* context, const ::bess::pb::ListTcsRequest& request, ::bess::pb::ListTcsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::ListTcsRequest, ::bess::pb::ListTcsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListTcs_, context, request, response);
}

void BESSControl::Stub::async::ListTcs(::grpc::ClientContext* context, const ::bess::pb::ListTcsRequest* request, ::bess::pb::ListTcsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::ListTcsRequest, ::bess::pb::ListTcsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTcs_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ListTcs(::grpc::ClientContext* context, const ::bess::pb::ListTcsRequest* request, ::bess::pb::ListTcsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTcs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListTcsResponse>* BESSControl::Stub::PrepareAsyncListTcsRaw(::grpc::ClientContext* context, const ::bess::pb::ListTcsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::ListTcsResponse, ::bess::pb::ListTcsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListTcs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListTcsResponse>* BESSControl::Stub::AsyncListTcsRaw(::grpc::ClientContext* context, const ::bess::pb::ListTcsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListTcsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::CheckSchedulingConstraints(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::CheckSchedulingConstraintsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::CheckSchedulingConstraintsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckSchedulingConstraints_, context, request, response);
}

void BESSControl::Stub::async::CheckSchedulingConstraints(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::CheckSchedulingConstraintsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::CheckSchedulingConstraintsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckSchedulingConstraints_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::CheckSchedulingConstraints(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::CheckSchedulingConstraintsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckSchedulingConstraints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::CheckSchedulingConstraintsResponse>* BESSControl::Stub::PrepareAsyncCheckSchedulingConstraintsRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::CheckSchedulingConstraintsResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckSchedulingConstraints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::CheckSchedulingConstraintsResponse>* BESSControl::Stub::AsyncCheckSchedulingConstraintsRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckSchedulingConstraintsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::AddTc(::grpc::ClientContext* context, const ::bess::pb::AddTcRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::AddTcRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddTc_, context, request, response);
}

void BESSControl::Stub::async::AddTc(::grpc::ClientContext* context, const ::bess::pb::AddTcRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::AddTcRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddTc_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::AddTc(::grpc::ClientContext* context, const ::bess::pb::AddTcRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddTc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncAddTcRaw(::grpc::ClientContext* context, const ::bess::pb::AddTcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::AddTcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddTc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncAddTcRaw(::grpc::ClientContext* context, const ::bess::pb::AddTcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddTcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::UpdateTcParams(::grpc::ClientContext* context, const ::bess::pb::UpdateTcParamsRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::UpdateTcParamsRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateTcParams_, context, request, response);
}

void BESSControl::Stub::async::UpdateTcParams(::grpc::ClientContext* context, const ::bess::pb::UpdateTcParamsRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::UpdateTcParamsRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTcParams_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::UpdateTcParams(::grpc::ClientContext* context, const ::bess::pb::UpdateTcParamsRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTcParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncUpdateTcParamsRaw(::grpc::ClientContext* context, const ::bess::pb::UpdateTcParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::UpdateTcParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateTcParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncUpdateTcParamsRaw(::grpc::ClientContext* context, const ::bess::pb::UpdateTcParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateTcParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::UpdateTcParent(::grpc::ClientContext* context, const ::bess::pb::UpdateTcParentRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::UpdateTcParentRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateTcParent_, context, request, response);
}

void BESSControl::Stub::async::UpdateTcParent(::grpc::ClientContext* context, const ::bess::pb::UpdateTcParentRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::UpdateTcParentRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTcParent_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::UpdateTcParent(::grpc::ClientContext* context, const ::bess::pb::UpdateTcParentRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTcParent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncUpdateTcParentRaw(::grpc::ClientContext* context, const ::bess::pb::UpdateTcParentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::UpdateTcParentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateTcParent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncUpdateTcParentRaw(::grpc::ClientContext* context, const ::bess::pb::UpdateTcParentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateTcParentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::GetTcStats(::grpc::ClientContext* context, const ::bess::pb::GetTcStatsRequest& request, ::bess::pb::GetTcStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::GetTcStatsRequest, ::bess::pb::GetTcStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTcStats_, context, request, response);
}

void BESSControl::Stub::async::GetTcStats(::grpc::ClientContext* context, const ::bess::pb::GetTcStatsRequest* request, ::bess::pb::GetTcStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::GetTcStatsRequest, ::bess::pb::GetTcStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTcStats_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::GetTcStats(::grpc::ClientContext* context, const ::bess::pb::GetTcStatsRequest* request, ::bess::pb::GetTcStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTcStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::GetTcStatsResponse>* BESSControl::Stub::PrepareAsyncGetTcStatsRaw(::grpc::ClientContext* context, const ::bess::pb::GetTcStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::GetTcStatsResponse, ::bess::pb::GetTcStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTcStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::GetTcStatsResponse>* BESSControl::Stub::AsyncGetTcStatsRaw(::grpc::ClientContext* context, const ::bess::pb::GetTcStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTcStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ListDrivers(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::ListDriversResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::ListDriversResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListDrivers_, context, request, response);
}

void BESSControl::Stub::async::ListDrivers(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListDriversResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::ListDriversResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDrivers_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ListDrivers(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListDriversResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDrivers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListDriversResponse>* BESSControl::Stub::PrepareAsyncListDriversRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::ListDriversResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListDrivers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListDriversResponse>* BESSControl::Stub::AsyncListDriversRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListDriversRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::GetDriverInfo(::grpc::ClientContext* context, const ::bess::pb::GetDriverInfoRequest& request, ::bess::pb::GetDriverInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::GetDriverInfoRequest, ::bess::pb::GetDriverInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDriverInfo_, context, request, response);
}

void BESSControl::Stub::async::GetDriverInfo(::grpc::ClientContext* context, const ::bess::pb::GetDriverInfoRequest* request, ::bess::pb::GetDriverInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::GetDriverInfoRequest, ::bess::pb::GetDriverInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDriverInfo_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::GetDriverInfo(::grpc::ClientContext* context, const ::bess::pb::GetDriverInfoRequest* request, ::bess::pb::GetDriverInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDriverInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::GetDriverInfoResponse>* BESSControl::Stub::PrepareAsyncGetDriverInfoRaw(::grpc::ClientContext* context, const ::bess::pb::GetDriverInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::GetDriverInfoResponse, ::bess::pb::GetDriverInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDriverInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::GetDriverInfoResponse>* BESSControl::Stub::AsyncGetDriverInfoRaw(::grpc::ClientContext* context, const ::bess::pb::GetDriverInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDriverInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ResetPorts(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetPorts_, context, request, response);
}

void BESSControl::Stub::async::ResetPorts(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPorts_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ResetPorts(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPorts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncResetPortsRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetPorts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncResetPortsRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetPortsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ListPorts(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::ListPortsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::ListPortsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListPorts_, context, request, response);
}

void BESSControl::Stub::async::ListPorts(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListPortsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::ListPortsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListPorts_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ListPorts(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListPortsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListPorts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListPortsResponse>* BESSControl::Stub::PrepareAsyncListPortsRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::ListPortsResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListPorts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListPortsResponse>* BESSControl::Stub::AsyncListPortsRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListPortsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::CreatePort(::grpc::ClientContext* context, const ::bess::pb::CreatePortRequest& request, ::bess::pb::CreatePortResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::CreatePortRequest, ::bess::pb::CreatePortResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreatePort_, context, request, response);
}

void BESSControl::Stub::async::CreatePort(::grpc::ClientContext* context, const ::bess::pb::CreatePortRequest* request, ::bess::pb::CreatePortResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::CreatePortRequest, ::bess::pb::CreatePortResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePort_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::CreatePort(::grpc::ClientContext* context, const ::bess::pb::CreatePortRequest* request, ::bess::pb::CreatePortResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::CreatePortResponse>* BESSControl::Stub::PrepareAsyncCreatePortRaw(::grpc::ClientContext* context, const ::bess::pb::CreatePortRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::CreatePortResponse, ::bess::pb::CreatePortRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreatePort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::CreatePortResponse>* BESSControl::Stub::AsyncCreatePortRaw(::grpc::ClientContext* context, const ::bess::pb::CreatePortRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreatePortRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::DestroyPort(::grpc::ClientContext* context, const ::bess::pb::DestroyPortRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::DestroyPortRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyPort_, context, request, response);
}

void BESSControl::Stub::async::DestroyPort(::grpc::ClientContext* context, const ::bess::pb::DestroyPortRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::DestroyPortRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyPort_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::DestroyPort(::grpc::ClientContext* context, const ::bess::pb::DestroyPortRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyPort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncDestroyPortRaw(::grpc::ClientContext* context, const ::bess::pb::DestroyPortRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::DestroyPortRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyPort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncDestroyPortRaw(::grpc::ClientContext* context, const ::bess::pb::DestroyPortRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyPortRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::SetPortConf(::grpc::ClientContext* context, const ::bess::pb::SetPortConfRequest& request, ::bess::pb::CommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::SetPortConfRequest, ::bess::pb::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPortConf_, context, request, response);
}

void BESSControl::Stub::async::SetPortConf(::grpc::ClientContext* context, const ::bess::pb::SetPortConfRequest* request, ::bess::pb::CommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::SetPortConfRequest, ::bess::pb::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPortConf_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::SetPortConf(::grpc::ClientContext* context, const ::bess::pb::SetPortConfRequest* request, ::bess::pb::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPortConf_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::CommandResponse>* BESSControl::Stub::PrepareAsyncSetPortConfRaw(::grpc::ClientContext* context, const ::bess::pb::SetPortConfRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::CommandResponse, ::bess::pb::SetPortConfRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPortConf_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::CommandResponse>* BESSControl::Stub::AsyncSetPortConfRaw(::grpc::ClientContext* context, const ::bess::pb::SetPortConfRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPortConfRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::GetPortConf(::grpc::ClientContext* context, const ::bess::pb::GetPortConfRequest& request, ::bess::pb::GetPortConfResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::GetPortConfRequest, ::bess::pb::GetPortConfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPortConf_, context, request, response);
}

void BESSControl::Stub::async::GetPortConf(::grpc::ClientContext* context, const ::bess::pb::GetPortConfRequest* request, ::bess::pb::GetPortConfResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::GetPortConfRequest, ::bess::pb::GetPortConfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPortConf_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::GetPortConf(::grpc::ClientContext* context, const ::bess::pb::GetPortConfRequest* request, ::bess::pb::GetPortConfResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPortConf_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::GetPortConfResponse>* BESSControl::Stub::PrepareAsyncGetPortConfRaw(::grpc::ClientContext* context, const ::bess::pb::GetPortConfRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::GetPortConfResponse, ::bess::pb::GetPortConfRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPortConf_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::GetPortConfResponse>* BESSControl::Stub::AsyncGetPortConfRaw(::grpc::ClientContext* context, const ::bess::pb::GetPortConfRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPortConfRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::GetPortStats(::grpc::ClientContext* context, const ::bess::pb::GetPortStatsRequest& request, ::bess::pb::GetPortStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::GetPortStatsRequest, ::bess::pb::GetPortStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPortStats_, context, request, response);
}

void BESSControl::Stub::async::GetPortStats(::grpc::ClientContext* context, const ::bess::pb::GetPortStatsRequest* request, ::bess::pb::GetPortStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::GetPortStatsRequest, ::bess::pb::GetPortStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPortStats_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::GetPortStats(::grpc::ClientContext* context, const ::bess::pb::GetPortStatsRequest* request, ::bess::pb::GetPortStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPortStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::GetPortStatsResponse>* BESSControl::Stub::PrepareAsyncGetPortStatsRaw(::grpc::ClientContext* context, const ::bess::pb::GetPortStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::GetPortStatsResponse, ::bess::pb::GetPortStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPortStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::GetPortStatsResponse>* BESSControl::Stub::AsyncGetPortStatsRaw(::grpc::ClientContext* context, const ::bess::pb::GetPortStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPortStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::GetLinkStatus(::grpc::ClientContext* context, const ::bess::pb::GetLinkStatusRequest& request, ::bess::pb::GetLinkStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::GetLinkStatusRequest, ::bess::pb::GetLinkStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLinkStatus_, context, request, response);
}

void BESSControl::Stub::async::GetLinkStatus(::grpc::ClientContext* context, const ::bess::pb::GetLinkStatusRequest* request, ::bess::pb::GetLinkStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::GetLinkStatusRequest, ::bess::pb::GetLinkStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLinkStatus_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::GetLinkStatus(::grpc::ClientContext* context, const ::bess::pb::GetLinkStatusRequest* request, ::bess::pb::GetLinkStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLinkStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::GetLinkStatusResponse>* BESSControl::Stub::PrepareAsyncGetLinkStatusRaw(::grpc::ClientContext* context, const ::bess::pb::GetLinkStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::GetLinkStatusResponse, ::bess::pb::GetLinkStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLinkStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::GetLinkStatusResponse>* BESSControl::Stub::AsyncGetLinkStatusRaw(::grpc::ClientContext* context, const ::bess::pb::GetLinkStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLinkStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ListMclass(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::ListMclassResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::ListMclassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListMclass_, context, request, response);
}

void BESSControl::Stub::async::ListMclass(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListMclassResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::ListMclassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListMclass_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ListMclass(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListMclassResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListMclass_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListMclassResponse>* BESSControl::Stub::PrepareAsyncListMclassRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::ListMclassResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListMclass_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListMclassResponse>* BESSControl::Stub::AsyncListMclassRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListMclassRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::GetMclassInfo(::grpc::ClientContext* context, const ::bess::pb::GetMclassInfoRequest& request, ::bess::pb::GetMclassInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::GetMclassInfoRequest, ::bess::pb::GetMclassInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMclassInfo_, context, request, response);
}

void BESSControl::Stub::async::GetMclassInfo(::grpc::ClientContext* context, const ::bess::pb::GetMclassInfoRequest* request, ::bess::pb::GetMclassInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::GetMclassInfoRequest, ::bess::pb::GetMclassInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMclassInfo_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::GetMclassInfo(::grpc::ClientContext* context, const ::bess::pb::GetMclassInfoRequest* request, ::bess::pb::GetMclassInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMclassInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::GetMclassInfoResponse>* BESSControl::Stub::PrepareAsyncGetMclassInfoRaw(::grpc::ClientContext* context, const ::bess::pb::GetMclassInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::GetMclassInfoResponse, ::bess::pb::GetMclassInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMclassInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::GetMclassInfoResponse>* BESSControl::Stub::AsyncGetMclassInfoRaw(::grpc::ClientContext* context, const ::bess::pb::GetMclassInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMclassInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ResetModules(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetModules_, context, request, response);
}

void BESSControl::Stub::async::ResetModules(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetModules_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ResetModules(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetModules_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncResetModulesRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetModules_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncResetModulesRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetModulesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ListModules(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::ListModulesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::ListModulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListModules_, context, request, response);
}

void BESSControl::Stub::async::ListModules(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListModulesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::ListModulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListModules_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ListModules(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListModulesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListModules_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListModulesResponse>* BESSControl::Stub::PrepareAsyncListModulesRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::ListModulesResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListModules_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListModulesResponse>* BESSControl::Stub::AsyncListModulesRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListModulesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::CreateModule(::grpc::ClientContext* context, const ::bess::pb::CreateModuleRequest& request, ::bess::pb::CreateModuleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::CreateModuleRequest, ::bess::pb::CreateModuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateModule_, context, request, response);
}

void BESSControl::Stub::async::CreateModule(::grpc::ClientContext* context, const ::bess::pb::CreateModuleRequest* request, ::bess::pb::CreateModuleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::CreateModuleRequest, ::bess::pb::CreateModuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateModule_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::CreateModule(::grpc::ClientContext* context, const ::bess::pb::CreateModuleRequest* request, ::bess::pb::CreateModuleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateModule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::CreateModuleResponse>* BESSControl::Stub::PrepareAsyncCreateModuleRaw(::grpc::ClientContext* context, const ::bess::pb::CreateModuleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::CreateModuleResponse, ::bess::pb::CreateModuleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateModule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::CreateModuleResponse>* BESSControl::Stub::AsyncCreateModuleRaw(::grpc::ClientContext* context, const ::bess::pb::CreateModuleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateModuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::DestroyModule(::grpc::ClientContext* context, const ::bess::pb::DestroyModuleRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::DestroyModuleRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyModule_, context, request, response);
}

void BESSControl::Stub::async::DestroyModule(::grpc::ClientContext* context, const ::bess::pb::DestroyModuleRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::DestroyModuleRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyModule_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::DestroyModule(::grpc::ClientContext* context, const ::bess::pb::DestroyModuleRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyModule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncDestroyModuleRaw(::grpc::ClientContext* context, const ::bess::pb::DestroyModuleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::DestroyModuleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyModule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncDestroyModuleRaw(::grpc::ClientContext* context, const ::bess::pb::DestroyModuleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyModuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::GetModuleInfo(::grpc::ClientContext* context, const ::bess::pb::GetModuleInfoRequest& request, ::bess::pb::GetModuleInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::GetModuleInfoRequest, ::bess::pb::GetModuleInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetModuleInfo_, context, request, response);
}

void BESSControl::Stub::async::GetModuleInfo(::grpc::ClientContext* context, const ::bess::pb::GetModuleInfoRequest* request, ::bess::pb::GetModuleInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::GetModuleInfoRequest, ::bess::pb::GetModuleInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModuleInfo_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::GetModuleInfo(::grpc::ClientContext* context, const ::bess::pb::GetModuleInfoRequest* request, ::bess::pb::GetModuleInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModuleInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::GetModuleInfoResponse>* BESSControl::Stub::PrepareAsyncGetModuleInfoRaw(::grpc::ClientContext* context, const ::bess::pb::GetModuleInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::GetModuleInfoResponse, ::bess::pb::GetModuleInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetModuleInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::GetModuleInfoResponse>* BESSControl::Stub::AsyncGetModuleInfoRaw(::grpc::ClientContext* context, const ::bess::pb::GetModuleInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetModuleInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ConnectModules(::grpc::ClientContext* context, const ::bess::pb::ConnectModulesRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::ConnectModulesRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConnectModules_, context, request, response);
}

void BESSControl::Stub::async::ConnectModules(::grpc::ClientContext* context, const ::bess::pb::ConnectModulesRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::ConnectModulesRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectModules_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ConnectModules(::grpc::ClientContext* context, const ::bess::pb::ConnectModulesRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectModules_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncConnectModulesRaw(::grpc::ClientContext* context, const ::bess::pb::ConnectModulesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::ConnectModulesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConnectModules_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncConnectModulesRaw(::grpc::ClientContext* context, const ::bess::pb::ConnectModulesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectModulesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::DisconnectModules(::grpc::ClientContext* context, const ::bess::pb::DisconnectModulesRequest& request, ::bess::pb::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::DisconnectModulesRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DisconnectModules_, context, request, response);
}

void BESSControl::Stub::async::DisconnectModules(::grpc::ClientContext* context, const ::bess::pb::DisconnectModulesRequest* request, ::bess::pb::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::DisconnectModulesRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisconnectModules_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::DisconnectModules(::grpc::ClientContext* context, const ::bess::pb::DisconnectModulesRequest* request, ::bess::pb::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisconnectModules_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::PrepareAsyncDisconnectModulesRaw(::grpc::ClientContext* context, const ::bess::pb::DisconnectModulesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::EmptyResponse, ::bess::pb::DisconnectModulesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DisconnectModules_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::EmptyResponse>* BESSControl::Stub::AsyncDisconnectModulesRaw(::grpc::ClientContext* context, const ::bess::pb::DisconnectModulesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisconnectModulesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::DumpMempool(::grpc::ClientContext* context, const ::bess::pb::DumpMempoolRequest& request, ::bess::pb::DumpMempoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::DumpMempoolRequest, ::bess::pb::DumpMempoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DumpMempool_, context, request, response);
}

void BESSControl::Stub::async::DumpMempool(::grpc::ClientContext* context, const ::bess::pb::DumpMempoolRequest* request, ::bess::pb::DumpMempoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::DumpMempoolRequest, ::bess::pb::DumpMempoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DumpMempool_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::DumpMempool(::grpc::ClientContext* context, const ::bess::pb::DumpMempoolRequest* request, ::bess::pb::DumpMempoolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DumpMempool_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::DumpMempoolResponse>* BESSControl::Stub::PrepareAsyncDumpMempoolRaw(::grpc::ClientContext* context, const ::bess::pb::DumpMempoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::DumpMempoolResponse, ::bess::pb::DumpMempoolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DumpMempool_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::DumpMempoolResponse>* BESSControl::Stub::AsyncDumpMempoolRaw(::grpc::ClientContext* context, const ::bess::pb::DumpMempoolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDumpMempoolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ModuleCommand(::grpc::ClientContext* context, const ::bess::pb::CommandRequest& request, ::bess::pb::CommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::CommandRequest, ::bess::pb::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModuleCommand_, context, request, response);
}

void BESSControl::Stub::async::ModuleCommand(::grpc::ClientContext* context, const ::bess::pb::CommandRequest* request, ::bess::pb::CommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::CommandRequest, ::bess::pb::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModuleCommand_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ModuleCommand(::grpc::ClientContext* context, const ::bess::pb::CommandRequest* request, ::bess::pb::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModuleCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::CommandResponse>* BESSControl::Stub::PrepareAsyncModuleCommandRaw(::grpc::ClientContext* context, const ::bess::pb::CommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::CommandResponse, ::bess::pb::CommandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModuleCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::CommandResponse>* BESSControl::Stub::AsyncModuleCommandRaw(::grpc::ClientContext* context, const ::bess::pb::CommandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModuleCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ListGateHookClass(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::ListGateHookClassResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::ListGateHookClassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListGateHookClass_, context, request, response);
}

void BESSControl::Stub::async::ListGateHookClass(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListGateHookClassResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::ListGateHookClassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListGateHookClass_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ListGateHookClass(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListGateHookClassResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListGateHookClass_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListGateHookClassResponse>* BESSControl::Stub::PrepareAsyncListGateHookClassRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::ListGateHookClassResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListGateHookClass_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListGateHookClassResponse>* BESSControl::Stub::AsyncListGateHookClassRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListGateHookClassRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::GetGateHookClassInfo(::grpc::ClientContext* context, const ::bess::pb::GetGateHookClassInfoRequest& request, ::bess::pb::GetGateHookClassInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::GetGateHookClassInfoRequest, ::bess::pb::GetGateHookClassInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGateHookClassInfo_, context, request, response);
}

void BESSControl::Stub::async::GetGateHookClassInfo(::grpc::ClientContext* context, const ::bess::pb::GetGateHookClassInfoRequest* request, ::bess::pb::GetGateHookClassInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::GetGateHookClassInfoRequest, ::bess::pb::GetGateHookClassInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGateHookClassInfo_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::GetGateHookClassInfo(::grpc::ClientContext* context, const ::bess::pb::GetGateHookClassInfoRequest* request, ::bess::pb::GetGateHookClassInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGateHookClassInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::GetGateHookClassInfoResponse>* BESSControl::Stub::PrepareAsyncGetGateHookClassInfoRaw(::grpc::ClientContext* context, const ::bess::pb::GetGateHookClassInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::GetGateHookClassInfoResponse, ::bess::pb::GetGateHookClassInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGateHookClassInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::GetGateHookClassInfoResponse>* BESSControl::Stub::AsyncGetGateHookClassInfoRaw(::grpc::ClientContext* context, const ::bess::pb::GetGateHookClassInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGateHookClassInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ConfigureGateHook(::grpc::ClientContext* context, const ::bess::pb::ConfigureGateHookRequest& request, ::bess::pb::ConfigureGateHookResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::ConfigureGateHookRequest, ::bess::pb::ConfigureGateHookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConfigureGateHook_, context, request, response);
}

void BESSControl::Stub::async::ConfigureGateHook(::grpc::ClientContext* context, const ::bess::pb::ConfigureGateHookRequest* request, ::bess::pb::ConfigureGateHookResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::ConfigureGateHookRequest, ::bess::pb::ConfigureGateHookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfigureGateHook_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ConfigureGateHook(::grpc::ClientContext* context, const ::bess::pb::ConfigureGateHookRequest* request, ::bess::pb::ConfigureGateHookResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfigureGateHook_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ConfigureGateHookResponse>* BESSControl::Stub::PrepareAsyncConfigureGateHookRaw(::grpc::ClientContext* context, const ::bess::pb::ConfigureGateHookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::ConfigureGateHookResponse, ::bess::pb::ConfigureGateHookRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConfigureGateHook_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ConfigureGateHookResponse>* BESSControl::Stub::AsyncConfigureGateHookRaw(::grpc::ClientContext* context, const ::bess::pb::ConfigureGateHookRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfigureGateHookRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ListGateHooks(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::bess::pb::ListGateHooksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::ListGateHooksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListGateHooks_, context, request, response);
}

void BESSControl::Stub::async::ListGateHooks(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListGateHooksResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::EmptyRequest, ::bess::pb::ListGateHooksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListGateHooks_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ListGateHooks(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListGateHooksResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListGateHooks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListGateHooksResponse>* BESSControl::Stub::PrepareAsyncListGateHooksRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::ListGateHooksResponse, ::bess::pb::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListGateHooks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::ListGateHooksResponse>* BESSControl::Stub::AsyncListGateHooksRaw(::grpc::ClientContext* context, const ::bess::pb::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListGateHooksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::GateHookCommand(::grpc::ClientContext* context, const ::bess::pb::GateHookCommandRequest& request, ::bess::pb::CommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::GateHookCommandRequest, ::bess::pb::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GateHookCommand_, context, request, response);
}

void BESSControl::Stub::async::GateHookCommand(::grpc::ClientContext* context, const ::bess::pb::GateHookCommandRequest* request, ::bess::pb::CommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::GateHookCommandRequest, ::bess::pb::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GateHookCommand_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::GateHookCommand(::grpc::ClientContext* context, const ::bess::pb::GateHookCommandRequest* request, ::bess::pb::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GateHookCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::CommandResponse>* BESSControl::Stub::PrepareAsyncGateHookCommandRaw(::grpc::ClientContext* context, const ::bess::pb::GateHookCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::CommandResponse, ::bess::pb::GateHookCommandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GateHookCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::CommandResponse>* BESSControl::Stub::AsyncGateHookCommandRaw(::grpc::ClientContext* context, const ::bess::pb::GateHookCommandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGateHookCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BESSControl::Stub::ConfigureResumeHook(::grpc::ClientContext* context, const ::bess::pb::ConfigureResumeHookRequest& request, ::bess::pb::CommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bess::pb::ConfigureResumeHookRequest, ::bess::pb::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConfigureResumeHook_, context, request, response);
}

void BESSControl::Stub::async::ConfigureResumeHook(::grpc::ClientContext* context, const ::bess::pb::ConfigureResumeHookRequest* request, ::bess::pb::CommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bess::pb::ConfigureResumeHookRequest, ::bess::pb::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfigureResumeHook_, context, request, response, std::move(f));
}

void BESSControl::Stub::async::ConfigureResumeHook(::grpc::ClientContext* context, const ::bess::pb::ConfigureResumeHookRequest* request, ::bess::pb::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfigureResumeHook_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::CommandResponse>* BESSControl::Stub::PrepareAsyncConfigureResumeHookRaw(::grpc::ClientContext* context, const ::bess::pb::ConfigureResumeHookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bess::pb::CommandResponse, ::bess::pb::ConfigureResumeHookRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConfigureResumeHook_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bess::pb::CommandResponse>* BESSControl::Stub::AsyncConfigureResumeHookRaw(::grpc::ClientContext* context, const ::bess::pb::ConfigureResumeHookRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfigureResumeHookRaw(context, request, cq);
  result->StartCall();
  return result;
}

BESSControl::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::VersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::VersionResponse* resp) {
               return service->GetVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->ResetAll(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->KillBess(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::ImportPluginRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::ImportPluginRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->ImportPlugin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::UnloadPluginRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::UnloadPluginRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->UnloadPlugin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::ListPluginsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::ListPluginsResponse* resp) {
               return service->ListPlugins(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->PauseAll(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::PauseWorkerRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::PauseWorkerRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->PauseWorker(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::ResumeWorkerRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::ResumeWorkerRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->ResumeWorker(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->ResumeAll(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->ResetWorkers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::ListWorkersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::ListWorkersResponse* resp) {
               return service->ListWorkers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::AddWorkerRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::AddWorkerRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->AddWorker(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::DestroyWorkerRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::DestroyWorkerRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->DestroyWorker(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->ResetTcs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::ListTcsRequest, ::bess::pb::ListTcsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::ListTcsRequest* req,
             ::bess::pb::ListTcsResponse* resp) {
               return service->ListTcs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::CheckSchedulingConstraintsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::CheckSchedulingConstraintsResponse* resp) {
               return service->CheckSchedulingConstraints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::AddTcRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::AddTcRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->AddTc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::UpdateTcParamsRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::UpdateTcParamsRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->UpdateTcParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::UpdateTcParentRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::UpdateTcParentRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->UpdateTcParent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::GetTcStatsRequest, ::bess::pb::GetTcStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::GetTcStatsRequest* req,
             ::bess::pb::GetTcStatsResponse* resp) {
               return service->GetTcStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::ListDriversResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::ListDriversResponse* resp) {
               return service->ListDrivers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::GetDriverInfoRequest, ::bess::pb::GetDriverInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::GetDriverInfoRequest* req,
             ::bess::pb::GetDriverInfoResponse* resp) {
               return service->GetDriverInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->ResetPorts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::ListPortsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::ListPortsResponse* resp) {
               return service->ListPorts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::CreatePortRequest, ::bess::pb::CreatePortResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::CreatePortRequest* req,
             ::bess::pb::CreatePortResponse* resp) {
               return service->CreatePort(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::DestroyPortRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::DestroyPortRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->DestroyPort(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::SetPortConfRequest, ::bess::pb::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::SetPortConfRequest* req,
             ::bess::pb::CommandResponse* resp) {
               return service->SetPortConf(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::GetPortConfRequest, ::bess::pb::GetPortConfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::GetPortConfRequest* req,
             ::bess::pb::GetPortConfResponse* resp) {
               return service->GetPortConf(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::GetPortStatsRequest, ::bess::pb::GetPortStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::GetPortStatsRequest* req,
             ::bess::pb::GetPortStatsResponse* resp) {
               return service->GetPortStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::GetLinkStatusRequest, ::bess::pb::GetLinkStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::GetLinkStatusRequest* req,
             ::bess::pb::GetLinkStatusResponse* resp) {
               return service->GetLinkStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::ListMclassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::ListMclassResponse* resp) {
               return service->ListMclass(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::GetMclassInfoRequest, ::bess::pb::GetMclassInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::GetMclassInfoRequest* req,
             ::bess::pb::GetMclassInfoResponse* resp) {
               return service->GetMclassInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->ResetModules(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::ListModulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::ListModulesResponse* resp) {
               return service->ListModules(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::CreateModuleRequest, ::bess::pb::CreateModuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::CreateModuleRequest* req,
             ::bess::pb::CreateModuleResponse* resp) {
               return service->CreateModule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::DestroyModuleRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::DestroyModuleRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->DestroyModule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::GetModuleInfoRequest, ::bess::pb::GetModuleInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::GetModuleInfoRequest* req,
             ::bess::pb::GetModuleInfoResponse* resp) {
               return service->GetModuleInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::ConnectModulesRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::ConnectModulesRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->ConnectModules(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::DisconnectModulesRequest, ::bess::pb::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::DisconnectModulesRequest* req,
             ::bess::pb::EmptyResponse* resp) {
               return service->DisconnectModules(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::DumpMempoolRequest, ::bess::pb::DumpMempoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::DumpMempoolRequest* req,
             ::bess::pb::DumpMempoolResponse* resp) {
               return service->DumpMempool(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::CommandRequest, ::bess::pb::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::CommandRequest* req,
             ::bess::pb::CommandResponse* resp) {
               return service->ModuleCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::ListGateHookClassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::ListGateHookClassResponse* resp) {
               return service->ListGateHookClass(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::GetGateHookClassInfoRequest, ::bess::pb::GetGateHookClassInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::GetGateHookClassInfoRequest* req,
             ::bess::pb::GetGateHookClassInfoResponse* resp) {
               return service->GetGateHookClassInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::ConfigureGateHookRequest, ::bess::pb::ConfigureGateHookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::ConfigureGateHookRequest* req,
             ::bess::pb::ConfigureGateHookResponse* resp) {
               return service->ConfigureGateHook(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::EmptyRequest, ::bess::pb::ListGateHooksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::EmptyRequest* req,
             ::bess::pb::ListGateHooksResponse* resp) {
               return service->ListGateHooks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::GateHookCommandRequest, ::bess::pb::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::GateHookCommandRequest* req,
             ::bess::pb::CommandResponse* resp) {
               return service->GateHookCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BESSControl_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BESSControl::Service, ::bess::pb::ConfigureResumeHookRequest, ::bess::pb::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BESSControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bess::pb::ConfigureResumeHookRequest* req,
             ::bess::pb::CommandResponse* resp) {
               return service->ConfigureResumeHook(ctx, req, resp);
             }, this)));
}

BESSControl::Service::~Service() {
}

::grpc::Status BESSControl::Service::GetVersion(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::VersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ResetAll(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::KillBess(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ImportPlugin(::grpc::ServerContext* context, const ::bess::pb::ImportPluginRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::UnloadPlugin(::grpc::ServerContext* context, const ::bess::pb::UnloadPluginRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ListPlugins(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListPluginsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::PauseAll(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::PauseWorker(::grpc::ServerContext* context, const ::bess::pb::PauseWorkerRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ResumeWorker(::grpc::ServerContext* context, const ::bess::pb::ResumeWorkerRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ResumeAll(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ResetWorkers(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ListWorkers(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListWorkersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::AddWorker(::grpc::ServerContext* context, const ::bess::pb::AddWorkerRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::DestroyWorker(::grpc::ServerContext* context, const ::bess::pb::DestroyWorkerRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ResetTcs(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ListTcs(::grpc::ServerContext* context, const ::bess::pb::ListTcsRequest* request, ::bess::pb::ListTcsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::CheckSchedulingConstraints(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::CheckSchedulingConstraintsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::AddTc(::grpc::ServerContext* context, const ::bess::pb::AddTcRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::UpdateTcParams(::grpc::ServerContext* context, const ::bess::pb::UpdateTcParamsRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::UpdateTcParent(::grpc::ServerContext* context, const ::bess::pb::UpdateTcParentRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::GetTcStats(::grpc::ServerContext* context, const ::bess::pb::GetTcStatsRequest* request, ::bess::pb::GetTcStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ListDrivers(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListDriversResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::GetDriverInfo(::grpc::ServerContext* context, const ::bess::pb::GetDriverInfoRequest* request, ::bess::pb::GetDriverInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ResetPorts(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ListPorts(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListPortsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::CreatePort(::grpc::ServerContext* context, const ::bess::pb::CreatePortRequest* request, ::bess::pb::CreatePortResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::DestroyPort(::grpc::ServerContext* context, const ::bess::pb::DestroyPortRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::SetPortConf(::grpc::ServerContext* context, const ::bess::pb::SetPortConfRequest* request, ::bess::pb::CommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::GetPortConf(::grpc::ServerContext* context, const ::bess::pb::GetPortConfRequest* request, ::bess::pb::GetPortConfResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::GetPortStats(::grpc::ServerContext* context, const ::bess::pb::GetPortStatsRequest* request, ::bess::pb::GetPortStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::GetLinkStatus(::grpc::ServerContext* context, const ::bess::pb::GetLinkStatusRequest* request, ::bess::pb::GetLinkStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ListMclass(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListMclassResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::GetMclassInfo(::grpc::ServerContext* context, const ::bess::pb::GetMclassInfoRequest* request, ::bess::pb::GetMclassInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ResetModules(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ListModules(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListModulesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::CreateModule(::grpc::ServerContext* context, const ::bess::pb::CreateModuleRequest* request, ::bess::pb::CreateModuleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::DestroyModule(::grpc::ServerContext* context, const ::bess::pb::DestroyModuleRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::GetModuleInfo(::grpc::ServerContext* context, const ::bess::pb::GetModuleInfoRequest* request, ::bess::pb::GetModuleInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ConnectModules(::grpc::ServerContext* context, const ::bess::pb::ConnectModulesRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::DisconnectModules(::grpc::ServerContext* context, const ::bess::pb::DisconnectModulesRequest* request, ::bess::pb::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::DumpMempool(::grpc::ServerContext* context, const ::bess::pb::DumpMempoolRequest* request, ::bess::pb::DumpMempoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ModuleCommand(::grpc::ServerContext* context, const ::bess::pb::CommandRequest* request, ::bess::pb::CommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ListGateHookClass(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListGateHookClassResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::GetGateHookClassInfo(::grpc::ServerContext* context, const ::bess::pb::GetGateHookClassInfoRequest* request, ::bess::pb::GetGateHookClassInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ConfigureGateHook(::grpc::ServerContext* context, const ::bess::pb::ConfigureGateHookRequest* request, ::bess::pb::ConfigureGateHookResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ListGateHooks(::grpc::ServerContext* context, const ::bess::pb::EmptyRequest* request, ::bess::pb::ListGateHooksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::GateHookCommand(::grpc::ServerContext* context, const ::bess::pb::GateHookCommandRequest* request, ::bess::pb::CommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ConfigureResumeHook(::grpc::ServerContext* context, const ::bess::pb::ConfigureResumeHookRequest* request, ::bess::pb::CommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bess
}  // namespace pb

